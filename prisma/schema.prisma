// üß© –≠–Ω—ç —Ñ–∞–π–ª –Ω—å Prisma-–∏–π–Ω schema ‚Äî ”©–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–≥–∏–π–Ω —Ö“Ø—Å–Ω—ç–≥—Ç, —Ç–∞–ª–±–∞—Ä, —Ö–æ–ª–±–æ–æ –∑—ç—Ä–≥–∏–π–≥ —ç–Ω–¥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–¥–æ–≥
// üõ† Schema-–≥ ”©”©—Ä—á–∏–ª—Å–Ω–∏–π –¥–∞—Ä–∞–∞ `npx prisma migrate dev` —ç—Å–≤—ç–ª `npx prisma db push` –∫–æ–º–∞–Ω–¥—ã–≥ –∞—à–∏–≥–ª–∞–Ω–∞ !!!
// üöÄ –î–∞—Ä–∞–∞ –Ω—å backend API —ç—Å–≤—ç–ª service(src/controllers , src/routes ...) —Ñ–∞–π–ª—É—É–¥–∞–∞ –±–∏—á–∏–∂ ”©–≥”©–≥–¥”©–ª—Ç—ç–π –∞–∂–∏–ª–ª–∞–Ω–∞ 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  teacher
  student
  parent
  admin
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String?
  role      UserRole?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teacher   Teacher?  @relation("TeacherUser", fields: [teacherId], references: [id])
  teacherId String?   @unique

  student   Student? @relation("StudentUser", fields: [studentId], references: [id])
  studentId String?  @unique

  parent   Parent? @relation("ParentUser", fields: [parentId], references: [id])
  parentId String? @unique

  school   School? @relation("SchoolUser", fields: [schoolId], references: [id])
  schoolId String? @unique
}

model TestUser {
  id        String  @id @default(cuid())
  email     String?
  fullName  String?
  avatarUrl String?
  provider  String?
  role      String?

  groupId String?
  gradeId String?

  group     Group?   @relation(fields: [groupId], references: [id])
  grade     Grade?   @relation(fields: [gradeId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Message {
  id          String   @id @default(uuid())
  content     String
  sender_id   String
  receiver_id String
  created_at  DateTime @default(now())

  sender   TestUser @relation("SentMessages", fields: [sender_id], references: [id])
  receiver TestUser @relation("ReceivedMessages", fields: [receiver_id], references: [id])
}

// üß© –•—ç—Ä—ç–≥–ª—ç–≥—á –Ω—å –∑”©–≤—Ö”©–Ω –Ω—ç–≥ —Ç”©—Ä–ª–∏–π–Ω role-—Ç–æ–π –±–∞–π–Ω–∞

model School {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  grades    Grade[]
  createdAt DateTime @default(now())

  user User? @relation("SchoolUser")
}

model Grade {
  id       String  @id @default(uuid())
  number   Int     @unique
  groups   Group[]
  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id])

  teachers Teacher[]
  students Student[] // üß© –∞–Ω–≥–∏–π–Ω –±“Ø—Ö —Å—É—Ä–∞–≥—á–∏–¥—Ç–∞–π —Ö–æ–ª–±–æ–æ
  TestUser TestUser[]
}

model Group {
  id      String @id @default(uuid())
  name    String
  gradeId String
  grade   Grade  @relation(fields: [gradeId], references: [id]) // üß© –±“Ø–ª—ç–≥ –Ω—å –Ω—ç–≥ –∞–Ω–≥–∏–¥ —Ö–∞–º–∞–∞—Ä–Ω–∞

  students Student[]
  teachers Teacher[]
  TestUser TestUser[]
}

model Teacher {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  email           String   @unique
  password        String?  @default("teacher1234")
  subject         String[]
  phoneNumber     String?
  emergencyNumber String?
  groupId         String?
  gradeId         String?
  groupRef        Group?   @relation(fields: [groupId], references: [id]) // üß© –±–∞–≥—à –±“Ø–ª—ç–≥—Ç —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π
  gradeRef        Grade?   @relation(fields: [gradeId], references: [id]) // üß© –±–∞–≥—à –∞–Ω–≥–∏–¥ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π

  user    User?     @relation("TeacherUser")
  Student Student[]
}

enum Gender {
  male
  female
}

model Student {
  id              String       @id @default(uuid())
  firstName       String
  lastName        String
  email           String?      @unique
  phoneNumber     String?
  emergencyNumber String?
  teacherId       String?
  groupId         String?
  gradeId         String? // ‚úÖ –ù—ç–º—ç–≥–¥—Å—ç–Ω —Ç–∞–ª–±–∞—Ä ‚Äî –∞–Ω–≥–∏–∞ —Ö–∞–¥–≥–∞–ª–∞—Ö
  parentId        String?
  gender          Gender       @default(male)
  user            User?        @relation("StudentUser")
  teacher         Teacher?     @relation(fields: [teacherId], references: [id]) // üß© –±–∞–≥—à—Ç–∞–π —Ö–æ–ª–±–æ–æ—Ç–æ–π
  group           Group?       @relation(fields: [groupId], references: [id]) // üß© –±“Ø–ª—ç–≥—Ç—ç–π —Ö–æ–ª–±–æ–æ—Ç–æ–π
  grade           Grade?       @relation(fields: [gradeId], references: [id]) // üß© –∞–Ω–≥–∏ –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ —Ö—ç—Ä—ç–≥—Ç—ç–π
  parent          Parent?      @relation(fields: [parentId], references: [id]) // üß© —ç—Ü—ç–≥ —ç—Ö—Ç—ç–π —Ö–æ–ª–±–æ–æ—Ç–æ–π
  attendance      Attendance[]
  scores          Score[]
}

model Parent {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  password  String

  students Student[] // üß© –æ–ª–æ–Ω —Ö“Ø“Ø—Ö—ç–¥—Ç—ç–π —Ö–æ–ª–±–æ–æ—Ç–æ–π –±–∞–π–∂ –±–æ–ª–Ω–æ

  user User? @relation("ParentUser")
}

model Attendance {
  id        String   @id @default(uuid())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id]) // üß© –∏—Ä—Ü –±“Ø—Ä—Ç–≥—ç–ª —Å—É—Ä–∞–≥—á–∏–¥ —Ö–∞–º–∞–∞—Ä–Ω–∞
}

model Score {
  id         String  @id @default(uuid())
  exam       Float
  active     Float
  attendance Float
  midterm    Float
  studentId  String
  student    Student @relation(fields: [studentId], references: [id]) // üß© –æ–Ω–æ–æ–Ω—ã –±“Ø—Ä—Ç–≥—ç–ª —Å—É—Ä–∞–≥—á–∏–¥ —Ö–∞–º–∞–∞—Ä–Ω–∞
}
